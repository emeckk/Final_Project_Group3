{
	"name": "standardize_denmark_medicine_data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group3fpspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "03da5421-701e-4f44-aa85-d83a8d7857d1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group3fp/providers/Microsoft.Synapse/workspaces/group3fpsynapse/bigDataPools/group3fpspark",
				"name": "group3fpspark",
				"type": "Spark",
				"endpoint": "https://group3fpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group3fpspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Load CSV files into temporary views"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Path to your ADLS folder\n",
					"atc_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/staging/denmark_medicine_atc/\"\n",
					"product_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/staging/denmark_medicine_product/\"\n",
					"\n",
					"# Read all CSVs from both datasets recursively into separate dataframes\n",
					"df_atc = (\n",
					"    spark.read\n",
					"    .option(\"header\", \"false\")\n",
					"    .option(\"delimiter\", \";\")\n",
					"    .csv(atc_path, recursiveFileLookup=True)\n",
					")\n",
					"\n",
					"df_product = (\n",
					"    spark.read\n",
					"    .option(\"header\", \"false\")\n",
					"    .option(\"delimiter\", \";\")\n",
					"    .csv(product_path, recursiveFileLookup=True)\n",
					")\n",
					"\n",
					"# Drop empty columns\n",
					"df_atc = df_atc.drop(\"_c13\")\n",
					"df_product = df_product.drop(\"_c14\")\n",
					"\n",
					"# Add headers\n",
					"new_cols_atc = [\n",
					"    \"atc\", \n",
					"    \"year\", \n",
					"    \"sector\", \n",
					"    \"region\", \n",
					"    \"sex\", \n",
					"    \"age_group\", \n",
					"    \"users\", \n",
					"    \"users_per_thousand_inhabitants\", \n",
					"    \"turnover_thousand_dkk\", \n",
					"    \"regional_subsidy_thousand_dkk\", \n",
					"    \"thousand_units_sold\", \n",
					"    \"units_sold_per_thousand_inhabitants_per_day\", \n",
					"    \"share_of_sales_linked_to_person\"\n",
					"    ]\n",
					"\n",
					"new_cols_product = [\n",
					"    \"atc\",\n",
					"    \"year\",\n",
					"    \"sector\",\n",
					"    \"item_number\",\n",
					"    \"a1_units_sold_thousand\",\n",
					"    \"a1_quantity_thousand\",\n",
					"    \"a1_turnover_thousand_dkk\",\n",
					"    \"a2_units_sold_thousand\",\n",
					"    \"a2_units_sold_subsidy_thousand\",\n",
					"    \"a2_quantity_thousand\",\n",
					"    \"a2_turnover_thousand_dkk\",\n",
					"    \"a2_regional_subsidy_thousand_dkk\",\n",
					"    \"a3_units_sold_thousand\",\n",
					"    \"a3_quantity_thousand\"\n",
					"]\n",
					"\n",
					"df_atc_renamed = df_atc.toDF(*new_cols_atc)\n",
					"df_product_renamed = df_product.toDF(*new_cols_product)\n",
					"\n",
					"# Create temp views\n",
					"df_atc_renamed.createOrReplaceTempView(\"raw_data_atc\")\n",
					"df_product_renamed.createOrReplaceTempView(\"raw_data_product\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Join datasets"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"SELECT * FROM raw_data_product;"
				],
				"execution_count": 29
			}
		]
	}
}