{
	"name": "join_and_sink_to_sql_pool",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group3fpspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3ea6b816-7783-4c77-9ff2-9c7cc701c8d0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group3fp/providers/Microsoft.Synapse/workspaces/group3fpsynapse/bigDataPools/group3fpspark",
				"name": "group3fpspark",
				"type": "Spark",
				"endpoint": "https://group3fpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group3fpspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Read data from staging layer"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"denmark_medicine_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/denmark_medicine.parquet/\"\n",
					"norway_medicine_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/norway_medicine.parquet/\"\n",
					"sweden_medicine_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/sweden_medicine.parquet/\"\n",
					"\n",
					"cause_of_death_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/cause_of_death.parquet/\"\n",
					"population_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/population.parquet/\"\n",
					"diabetes_prevalence_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/diabetes_prevalence.parquet\"\n",
					"# medicine_names_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/diabetes_prevalence.parquet\"\n",
					""
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"df_denmark_medicine = spark.read.parquet(denmark_medicine_path)\n",
					"df_norway_medicine = spark.read.parquet(norway_medicine_path)\n",
					"df_sweden_medicine = spark.read.parquet(sweden_medicine_path)\n",
					"\n",
					"df_cause_of_death = spark.read.parquet(cause_of_death_path)\n",
					"df_population = spark.read.parquet(population_path)\n",
					"df_diabetes_prevalence = spark.read.parquet(diabetes_prevalence_path)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"df_denmark_medicine.createOrReplaceTempView(\"denmark_medicine\")\n",
					"df_norway_medicine.createOrReplaceTempView(\"norway_medicine\")\n",
					"df_sweden_medicine.createOrReplaceTempView(\"sweden_medicine\")\n",
					"\n",
					"df_cause_of_death.createOrReplaceTempView(\"cause_of_death\")\n",
					"df_population.createOrReplaceTempView(\"population\")\n",
					"df_diabetes_prevalence.createOrReplaceTempView(\"diabetes_prevalence\")"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"select * from sweden_medicine limit 40"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"\n",
					"%%sql\n",
					"-- Get distinct ATC codes from each country\n",
					"WITH sweden AS (\n",
					"    SELECT DISTINCT atc_level_5 FROM sweden_medicine\n",
					"),\n",
					"norway AS (\n",
					"    SELECT DISTINCT atc_level_5 FROM norway_medicine\n",
					"),\n",
					"denmark AS (\n",
					"    SELECT DISTINCT atc_level_5 FROM denmark_medicine\n",
					")\n",
					"\n",
					"-- Full outer join on the ATC codes\n",
					"SELECT \n",
					"    s.atc_level_5 AS sweden_atc,\n",
					"    n.atc_level_5 AS norway_atc,\n",
					"    d.atc_level_5 AS denmark_atc\n",
					"FROM sweden s\n",
					"FULL OUTER JOIN norway n ON s.atc_level_5 = n.atc_level_5\n",
					"FULL OUTER JOIN denmark d ON COALESCE(s.atc_level_5, n.atc_level_5) = d.atc_level_5;\n",
					""
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"select distinct atc_level_5 from norway_medicine"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"CREATE TABLE IF NOT EXISTS dim_medicine AS \n",
					"SELECT\n",
					"    DISTINCT atc_level_5\n",
					"FROM\n",
					"    norway_medicine\n",
					"ORDER BY\n",
					"    atc_level_5 ASC;"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"SELECT * FROM dim_medicine"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"DROP TABLE IF EXISTS dim_country;\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS dim_country(\n",
					"    country_code STRING,\n",
					"    country STRING\n",
					");\n",
					"\n",
					"INSERT INTO dim_country VALUES\n",
					"('DNK', 'Denmark'),\n",
					"('SWE', 'Sweden'),\n",
					"('NOR', 'Norway');\n",
					"\n",
					"SELECT * FROM dim_country;\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"DROP TABLE IF EXISTS dim_year;\n",
					"\n",
					"CREATE TABLE dim_year AS\n",
					"SELECT explode(sequence(1980, 2025)) AS year;\n",
					"\n",
					"SELECT * FROM dim_year;"
				],
				"execution_count": 50
			}
		]
	}
}