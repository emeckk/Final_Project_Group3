{
	"name": "join_and_sink_to_sql_pool",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group3fpspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "387b61e6-d51b-4dd8-8e8e-26b2ef621aa9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group3fp/providers/Microsoft.Synapse/workspaces/group3fpsynapse/bigDataPools/group3fpspark",
				"name": "group3fpspark",
				"type": "Spark",
				"endpoint": "https://group3fpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group3fpspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Read data from staging layer"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"denmark_medicine_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/denmark_medicine.parquet/\"\n",
					"norway_medicine_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/norway_medicine.parquet/\"\n",
					"sweden_medicine_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/sweden_medicine.parquet/\"\n",
					"\n",
					"cause_of_death_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/cause_of_death.parquet/\"\n",
					"population_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/population.parquet/\"\n",
					"diabetes_prevalence_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/diabetes_prevalence.parquet\"\n",
					"atc_name_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/atc_name.parquet\"\n",
					""
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"df_denmark_medicine = spark.read.parquet(denmark_medicine_path)\n",
					"df_norway_medicine = spark.read.parquet(norway_medicine_path)\n",
					"df_sweden_medicine = spark.read.parquet(sweden_medicine_path)\n",
					"\n",
					"df_cause_of_death = spark.read.parquet(cause_of_death_path)\n",
					"df_population = spark.read.parquet(population_path)\n",
					"df_diabetes_prevalence = spark.read.parquet(diabetes_prevalence_path)\n",
					"df_atc_name = spark.read.parquet(atc_name_path)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"df_denmark_medicine.createOrReplaceTempView(\"denmark_medicine\")\n",
					"df_norway_medicine.createOrReplaceTempView(\"norway_medicine\")\n",
					"df_sweden_medicine.createOrReplaceTempView(\"sweden_medicine\")\n",
					"\n",
					"df_cause_of_death.createOrReplaceTempView(\"cause_of_death\")\n",
					"df_population.createOrReplaceTempView(\"population\")\n",
					"df_diabetes_prevalence.createOrReplaceTempView(\"diabetes_prevalence\")\n",
					"df_atc_name.createOrReplaceTempView('atc_name')"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"DROP TABLE IF EXISTS dim_medicine;\n",
					"\n",
					"CREATE TABLE dim_medicine AS\n",
					"SELECT DISTINCT\n",
					"    s.atc_level_5,\n",
					"    n5.atc_name AS atc_level_5_name,\n",
					"    SUBSTRING(s.atc_level_5, 1, 5) AS atc_level_4,\n",
					"    n4.atc_name AS atc_level_4_name,\n",
					"    SUBSTRING(s.atc_level_5, 1, 3) AS atc_level_3,\n",
					"    n3.atc_name AS atc_level_3_name\n",
					"FROM \n",
					"    sweden_medicine s \n",
					"LEFT JOIN atc_name n5 ON n5.atc_code = s.atc_level_5  \n",
					"LEFT JOIN atc_name n4 ON n4.atc_code = SUBSTRING(s.atc_level_5, 1, 5)\n",
					"LEFT JOIN atc_name n3 ON n3.atc_code = SUBSTRING(s.atc_level_5, 1, 3);\n",
					"\n",
					"--For testing\n",
					"--SELECT * FROM dim_medicine;\n",
					"\n",
					""
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"DROP TABLE IF EXISTS dim_country;\n",
					"\n",
					"CREATE TABLE IF NOT EXISTS dim_country(\n",
					"    country_code STRING,\n",
					"    country_name STRING\n",
					");\n",
					"\n",
					"INSERT INTO dim_country VALUES\n",
					"('DNK', 'Denmark'),\n",
					"('SWE', 'Sweden'),\n",
					"('NOR', 'Norway');\n",
					"\n",
					"--For testing\n",
					"--SELECT * FROM dim_country;\n",
					""
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"DROP TABLE IF EXISTS dim_year;\n",
					"\n",
					"CREATE TABLE dim_year AS\n",
					"SELECT explode(sequence(1980, 2025)) AS year;\n",
					"\n",
					"--For testing\n",
					"--SELECT * FROM dim_year;"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"DROP TABLE IF EXISTS fact_medicine;\n",
					"\n",
					"CREATE TABLE fact_medicine AS\n",
					"SELECT\n",
					"    md5(CONCAT_WS('|', atc_level_5, CAST(year AS STRING), 'SWE')) AS id,\n",
					"    atc_level_5,\n",
					"    year,\n",
					"    'SWE' AS country_code,\n",
					"    dispensed_units,\n",
					"    users,\n",
					"    NULL AS dispensed_ddd\n",
					"FROM\n",
					"    sweden_medicine \n",
					"\n",
					"UNION ALL\n",
					"\n",
					"SELECT\n",
					"    md5(CONCAT_WS('|', atc_level_5, CAST(year AS STRING), 'DNK')) AS id,\n",
					"    atc_level_5,\n",
					"    year,\n",
					"    'DNK' AS country_code,\n",
					"    dispensed_units,\n",
					"    users,\n",
					"    dispensed_ddd\n",
					"FROM\n",
					"    denmark_medicine\n",
					"\n",
					"UNION ALL\n",
					"\n",
					"SELECT \n",
					"    md5(CONCAT_WS('|', atc_level_5, CAST(year AS STRING), 'NOR')) AS id,\n",
					"    atc_level_5,\n",
					"    year,\n",
					"    'NOR' AS country_code,\n",
					"    NULL AS dispensed_units,\n",
					"    users,\n",
					"    dispensed_ddd\n",
					"FROM\n",
					"    norway_medicine\n",
					"ORDER BY year, country_code ASC;\n",
					"\n",
					"--For testing\n",
					"--SELECT * FROM fact_medicine;"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"DROP TABLE IF EXISTS fact_country;\n",
					"\n",
					"CREATE TABLE fact_country AS\n",
					"SELECT\n",
					"    md5(CONCAT_WS('|', pop.year, pop.country)) AS id,\n",
					"    pop.year,\n",
					"    pop.country,\n",
					"    dth.deaths_diabetes_mellitus,\n",
					"    dth.deaths_cardiovascular_disease,\n",
					"    dth.deaths_heart_attack,\n",
					"    dth.deaths_kidney_and_ureter_disease,\n",
					"    dth.deaths_total,\n",
					"    pop.population,\n",
					"    ROUND(pop.population * (pre.diabetic_share * 1/100)) AS diabetic_population,\n",
					"    pre.diabetic_share\n",
					"FROM \n",
					"    population pop \n",
					"INNER JOIN cause_of_death dth ON dth.year = pop.year AND dth.country = pop.country\n",
					"INNER JOIN diabetes_prevalence pre ON pre.year = pop.year AND pre.country = pop.country\n",
					"ORDER BY \n",
					"    year, country ASC;\n",
					"\n",
					"--For testing\n",
					"--Select * from fact_country;\n",
					"\n",
					""
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"# Convert tables to suitible format\n",
					"dim_medicine_prod = spark.table(\"dim_medicine\")\n",
					"dim_year_prod = spark.table(\"dim_year\")\n",
					"dim_country_prod = spark.table(\"dim_country\")\n",
					"fact_medicine_prod = spark.table(\"fact_medicine\")\n",
					"fact_country_prod = spark.table(\"fact_country\")\n",
					"\n",
					"# Saves as parquet to production folder\n",
					"dim_medicine_prod.write.mode(\"overwrite\").parquet(\"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/production/dim_medicine.parquet\")\n",
					"dim_year_prod.write.mode(\"overwrite\").parquet(\"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/production/dim_year.parquet\")\n",
					"dim_country_prod.write.mode(\"overwrite\").parquet(\"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/production/dim_country.parquet\")\n",
					"fact_medicine_prod.write.mode(\"overwrite\").parquet(\"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/production/fact_medicine.parquet\")\n",
					"fact_country_prod.write.mode(\"overwrite\").parquet(\"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/production/fact_country.parquet\")\n",
					"\n",
					"\n",
					""
				],
				"execution_count": 69
			}
		]
	}
}