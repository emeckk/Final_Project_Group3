{
	"name": "standardize_sweden_medicine_data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group3fpspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d9cefe95-e648-4004-b809-8837a8d60576"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group3fp/providers/Microsoft.Synapse/workspaces/group3fpsynapse/bigDataPools/group3fpspark",
				"name": "group3fpspark",
				"type": "Spark",
				"endpoint": "https://group3fpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group3fpspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"df_raw = spark.read.parquet(\n",
					"    \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/staging/sweden_medical.parquet\",\n",
					"    header=True, inferSchema=True\n",
					")\n",
					"# convert to pandas\n",
					"df = df_raw.toPandas()\n",
					"\n",
					"# keep only the columns we care about\n",
					"df_long = df[['ar', 'kon_label', 'atc','antal_expedieringar', 'antal_patienter']]\n",
					"\n",
					"# sort based on time, gender, drug\n",
					"df_long = df_long.sort_values(by=['ar', 'atc']).reset_index(drop=True)\n",
					"\n",
					"#Change column names to our standardized names\n",
					"df_long = df_long.rename(columns={\n",
					"    'ar': 'year', \n",
					"'kon_label': 'sex', \n",
					"'atc':'atc_level_5', \n",
					"'antal_expedierinagr': 'expedited_ddd', \n",
					"'antal_patienter': 'users'\n",
					"})\n",
					"\n",
					"#Change Male and Female to M and F\n",
					"df_long['sex'] = df_long['sex'].replace({\n",
					"    'K': 'F'\n",
					"})\n",
					"df_long.head(30)"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"source": [
					"# Summera per år, kön, ATC\n",
					"df_grouped = (\n",
					"    df_long\n",
					"    .groupby([\"year\", \"sex\", \"atc_level_5\"], as_index=False)\n",
					"    [[\"antal_expedieringar\", \"users\"]]\n",
					"    .sum()\n",
					"    .sort_values([\"year\", \"atc_level_5\"])\n",
					"    .reset_index(drop=True)\n",
					")\n",
					"\n",
					"# Visa de första 30 raderna\n",
					"df_grouped.head(30)\n",
					""
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					"# Summera per år, kön, ATC\n",
					"df_grouped = (\n",
					"    df_long\n",
					"    .groupby([\"year\", \"sex\", \"atc_level_5\"], as_index=False)\n",
					"    [[\"antal_expedieringar\", \"users\"]]\n",
					"    .sum()\n",
					"    .assign(sex_order=lambda d: d[\"sex\"].map({\"M\": 0, \"F\": 1}))\n",
					"    .sort_values([\"year\", \"atc_level_5\", \"sex_order\"])\n",
					"    .drop(columns=\"sex_order\")\n",
					"    .reset_index(drop=True)\n",
					")\n",
					"\n",
					"# Visa de första 30 raderna\n",
					"df_grouped.head(30)\n",
					""
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"source": [
					"df_long.query(\"atc_level_5 == 'A10AB03'\").head(20)\n",
					""
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"source": [
					"#convert into spark df and store in our standardized folder\n",
					"spark_df = spark.createDataFrame(df_long)\n",
					"output_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/sweden_medicine.parquet\"\n",
					"spark_df.write.mode(\"overwrite\").parquet(output_path)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"\n",
					"# Läs standardized parquet som Pandas DF\n",
					"df_std = pd.read_parquet(\n",
					"    \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/sweden_medicine.parquet\",\n",
					"    engine=\"pyarrow\"\n",
					")\n",
					"\n",
					"#  Antal nulls per kolumn\n",
					"print(\"Nulls per kolumn:\")\n",
					"print(df_std.isnull().sum(), \"\\n\")\n",
					"\n",
					"# Distinkta värden i viktiga kolumner\n",
					"print(\"Unika värden i sex:\", df_std[\"sex\"].unique(), \"\\n\")\n",
					"print(\"Unika år (sorterade):\", sorted(df_std[\"year\"].unique())[:20], \"...\\n\")\n",
					"print(\"Unika ATC-koder:\", df_std[\"atc_level_5\"].unique(), \"\\n\")\n",
					"\n",
					"\n",
					"# Min / Max på numeriska kolumner\n",
					"print(\"Min/Max antal_expedieringar:\", df_std[\"antal_expedieringar\"].min(), \"/\", df_std[\"antal_expedieringar\"].max())\n",
					"print(\"Min/Max users:\", df_std[\"users\"].min(), \"/\", df_std[\"users\"].max())\n",
					""
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"source": [
					"# Kolla dubletter i hela datasetet\n",
					"dupes = df_std[df_std.duplicated(keep=False)]\n",
					"\n",
					"print(\"Antal exakta dubletter:\", len(dupes))\n",
					"\n",
					"# Visa några exempel\n",
					"dupes.sort_values([\"year\",\"sex\",\"atc_level_5\"]).head(20)\n",
					""
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"\n",
					"#  Läs standardized-data till Pandas\n",
					"df_std = pd.read_parquet(\n",
					"    \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/sweden_medicine.parquet\",\n",
					"    engine=\"pyarrow\"\n",
					")\n",
					"\n",
					"print(\"Antal rader före dublettrensning:\", len(df_std))\n",
					"\n",
					"#  Ta bort exakta dubletter\n",
					"df_nodup = df_std.drop_duplicates()\n",
					"\n",
					"print(\"Antal rader efter dublettrensning:\", len(df_nodup))\n",
					"\n",
					"#  Konvertera tillbaka till Spark DataFrame\n",
					"spark_df = spark.createDataFrame(df_nodup)\n",
					"\n",
					"#  Spara \n",
					"output_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/sweden_medicine.parquet\"\n",
					"spark_df.write.mode(\"overwrite\").parquet(output_path)\n",
					"\n",
					"print(f\" Rensad data utan dubletter sparad till {output_path}\")\n",
					""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"df_check = spark.read.parquet(\"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/standardized/sweden_medicine.parquet\")\n",
					"\n",
					"# Kolla om några dubletter finns kvar\n",
					"total_rows = df_check.count()\n",
					"unique_rows = df_check.dropDuplicates().count()\n",
					"\n",
					"print(\"Totala rader:\", total_rows)\n",
					"print(\"Unika rader:\", unique_rows)\n",
					"print(\"Dubletter kvar:\", total_rows - unique_rows)\n",
					""
				],
				"execution_count": 45
			}
		]
	}
}