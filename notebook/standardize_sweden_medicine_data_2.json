{
	"name": "standardize_sweden_medicine_data_2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group3fpspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "233e31da-08c7-4d67-98c4-b153b9c37279"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group3fp/providers/Microsoft.Synapse/workspaces/group3fpsynapse/bigDataPools/group3fpspark",
				"name": "group3fpspark",
				"type": "Spark",
				"endpoint": "https://group3fpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group3fpspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Unzip folder"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import zipfile\n",
					"import os\n",
					"from io import BytesIO\n",
					"import pandas as pd\n",
					"from pyspark.sql.functions import col\n",
					"\n",
					"zip_file_path = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/staging/sweden_medicine.zip\"\n",
					"extract_path = \"/tmp/unzipped\"\n",
					"\n",
					"os.makedirs(extract_path, exist_ok=True)\n",
					"\n",
					"# Load zip file as binary from ADLS\n",
					"zip_bytes = spark.read.format(\"binaryFile\").load(zip_file_path).collect()[0].content\n",
					"\n",
					"# Open it as a zip archive in memory\n",
					"with zipfile.ZipFile(BytesIO(zip_bytes), 'r') as zip_ref:\n",
					"    zip_ref.extractall(extract_path)\n",
					"\n",
					"# List extracted CSV files\n",
					"csv_files = [f for f in os.listdir(extract_path) if f.endswith('.csv')]\n",
					"print(csv_files)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create dataframes out of correct CSV files"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Construct paths\n",
					"dispensed_units_path = \"file://\" + os.path.join(extract_path, csv_files[-1])\n",
					"users_path = \"file://\" + os.path.join(extract_path, csv_files[-2])\n",
					"\n",
					"# Convert CSVs to spark dataframes\n",
					"df_dispensed_units = spark.read.option(\"header\", True).option(\"delimiter\", \";\").csv(dispensed_units_path)\n",
					"df_users = spark.read.option(\"header\", True).option(\"delimiter\", \";\").csv(users_path)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Filter data to include correct measure, all ages and both sexes"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Filter dispensed units dataframe\n",
					"df_dispensed_units_filtered = df_dispensed_units.filter(\n",
					"    (col(\"Mått\") == 3) &\n",
					"    (col(\"Region\") == 0) &\n",
					"    (col(\"ATC-kod\") != \"TOTALT\") &\n",
					"    (col(\"Ålder\") == 99) &\n",
					"    (col(\"Kön\") == 3)\n",
					")\n",
					"\n",
					"# Filter users dataframe\n",
					"df_users_filtered = df_users.filter(\n",
					"    (col(\"Mått\") == 1) &\n",
					"    (col(\"Region\") == 0) &\n",
					"    (col(\"ATC-kod\") in [\"TOTALT\"]) &\n",
					"    (col(\"Ålder\") == 99) &\n",
					"    (col(\"Kön\") == 3)\n",
					")\n",
					"\n",
					"df_dispensed_units_filtered.show(5)\n",
					"df_users_filtered.show(5)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Remove unnecessary and rename columns"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_dispensed_units_minimal = df_dispensed_units_filtered[[\"År\", \"ATC-kod\", \"Värde\"]]\n",
					"df_users_minimal = df_users_filtered[[\"År\", \"ATC-kod\", \"Värde\"]]\n",
					"\n",
					"df_dispensed_units_renamed = (\n",
					"    df_dispensed_units_minimal\n",
					"    .withColumnRenamed(\"År\", \"year\")\n",
					"    .withColumnRenamed(\"ATC-kod\", \"atc_level_5\")\n",
					"    .withColumnRenamed(\"Värde\", \"dispensed_units\")\n",
					")\n",
					"\n",
					"df_users_renamed = (\n",
					"    df_users_minimal\n",
					"    .withColumnRenamed(\"År\", \"year\")\n",
					"    .withColumnRenamed(\"ATC-kod\", \"atc_level_5\")\n",
					"    .withColumnRenamed(\"Värde\", \"users\")\n",
					")\n",
					"\n",
					"df_dispensed_units_renamed.show(5)\n",
					"df_users_renamed.show(5)"
				],
				"execution_count": 27
			}
		]
	}
}