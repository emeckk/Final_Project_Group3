{
	"name": "copy_denmark_medicine",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group3fpspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "17dfd714-39bb-41f4-90e7-b9d42eb22588"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/group3fp/providers/Microsoft.Synapse/workspaces/group3fpsynapse/bigDataPools/group3fpspark",
				"name": "group3fpspark",
				"type": "Spark",
				"endpoint": "https://group3fpsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group3fpspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import requests\n",
					"from bs4 import BeautifulSoup\n",
					"from urllib.parse import urljoin\n",
					"from pyspark.sql import Row\n",
					"\n",
					"BASE_URL = \"https://www.medstat.dk\"\n",
					"PAGE_URL = \"https://www.medstat.dk/da/download/\"\n",
					"ADLS_STAGING = \"abfss://group3fpfilesystem@group3fpadls.dfs.core.windows.net/staging/\"\n",
					"ADLS_ATC_DIR = ADLS_STAGING + \"denmark_medicine_atc/\"\n",
					"ADLS_PRODUCT_DIR = ADLS_STAGING + \"denmark_medicine_product/\"\n",
					"\n",
					"# Fetch the page\n",
					"response = requests.get(PAGE_URL)\n",
					"response.raise_for_status()\n",
					"soup = BeautifulSoup(response.text, \"html.parser\")\n",
					"\n",
					"# Loop over links\n",
					"for link in soup.find_all(\"a\", href=True):\n",
					"    href = link[\"href\"]\n",
					"    text = link.get_text(strip=True)\n",
					"    \n",
					"    if href.startswith(\"/da/download/file/\"):\n",
					"        file_url = urljoin(BASE_URL, href)\n",
					"        filename = text  # e.g. \"1996_atc_code_data.txt\"\n",
					"\n",
					"        print(f\"Downloading {filename}\", end=\"\\r\", flush=True)\n",
					"        file_response = requests.get(file_url)\n",
					"        file_response.raise_for_status()\n",
					"        \n",
					"        file_bytes = file_response.content\n",
					"        lines = file_bytes.decode(\"utf-8\").splitlines()\n",
					"        df = spark.createDataFrame([Row(value=line) for line in lines])\n",
					"\n",
					"        # Separate based on file name\n",
					"        if filename == \"atc_code_text.txt\":\n",
					"            output_path = ADLS_STAGING + filename\n",
					"        elif \"product_name_data\" in filename:\n",
					"            output_path = ADLS_PRODUCT_DIR + filename\n",
					"        elif \"atc_code_data\" in filename:\n",
					"            output_path = ADLS_ATC_DIR + filename\n",
					"\n",
					"        (df.write.mode(\"overwrite\")\n",
					"           .text(output_path))"
				],
				"execution_count": 2
			}
		]
	}
}